# Problem: Maximum Width of Binary Tree - https://leetcode.com/problems/maximum-width-of-binary-tree/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
       if (root == null) {
           return 0;
       }
       ArrayList<Integer> Array= new ArrayList<Integer>();
        return find(root, 0, 1,Array);

    }
    private int find(TreeNode root, int length, int point, ArrayList<Integer> Array) {
        if (root == null) {
            return 0;
        }
        if (length == Array.size()) {
            Array.add(point);
        }
        int current = point - Array.get(length) + 1;
        int left = find(root.left, length + 1, point * 2, Array);
        int right = find(root.right, length + 1, point * 2 + 1, Array);
        return Math.max(current, Math.max(left, right));
    }
}