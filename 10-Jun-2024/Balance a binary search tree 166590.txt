# Problem: Balance a binary search tree - https://leetcode.com/problems/balance-a-binary-search-tree/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {

    ArrayList<Integer> array = new ArrayList<>();

    public TreeNode balanceBST(TreeNode root) {

        inorder(array, root);
        return tree(0, array.size() - 1);

    }

    public TreeNode tree(int left, int right) {
        if (left > right)
            return null;
        int mid = (left + right) / 2;
        TreeNode root = new TreeNode(array.get(mid));
        root.left = tree(left, mid - 1);
        root.right = tree(mid + 1, right);
        return root;

    }

    public void inorder(ArrayList<Integer> arr, TreeNode root) {
        if (root == null) {
            return;

        }
        inorder(arr, root.left);
        arr.add(root.val);
        inorder(arr, root.right);
    }
}